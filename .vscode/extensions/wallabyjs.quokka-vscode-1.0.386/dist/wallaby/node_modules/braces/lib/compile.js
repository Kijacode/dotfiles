'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var fill = require('fill-range');
var utils = require('./utils');
var compile = function (ast, options) {
    if (options === void 0) { options = {}; }
    var walk = function (node, parent) {
        if (parent === void 0) { parent = {}; }
        var invalidBlock = utils.isInvalidBrace(parent);
        var invalidNode = node.invalid === true && options.escapeInvalid === true;
        var invalid = invalidBlock === true || invalidNode === true;
        var prefix = options.escapeInvalid === true ? '\\' : '';
        var output = '';
        if (node.isOpen === true) {
            return prefix + node.value;
        }
        if (node.isClose === true) {
            return prefix + node.value;
        }
        if (node.type === 'open') {
            return invalid ? (prefix + node.value) : '(';
        }
        if (node.type === 'close') {
            return invalid ? (prefix + node.value) : ')';
        }
        if (node.type === 'comma') {
            return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');
        }
        if (node.value) {
            return node.value;
        }
        if (node.nodes && node.ranges > 0) {
            var args = utils.reduce(node.nodes);
            var range = fill.apply(void 0, __spreadArrays(args, [__assign(__assign({}, options), { wrap: false, toRegex: true })]));
            if (range.length !== 0) {
                return args.length > 1 && range.length > 1 ? "(" + range + ")" : range;
            }
        }
        if (node.nodes) {
            for (var _i = 0, _a = node.nodes; _i < _a.length; _i++) {
                var child = _a[_i];
                output += walk(child, node);
            }
        }
        return output;
    };
    return walk(ast);
};
module.exports = compile;
