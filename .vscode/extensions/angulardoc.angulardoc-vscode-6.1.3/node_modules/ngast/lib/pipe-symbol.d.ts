import { Program } from 'typescript';
import { Pipe } from '@angular/core';
import { StaticSymbol, PipeResolver, CompileNgModuleMetadata, CompileMetadataResolver } from '@angular/compiler';
import { ProjectSymbols } from './project-symbols';
import { Symbol } from './symbol';
import { ProviderSymbol } from './provider-symbol';
/**
 * A wrapper around the pipe symbol.
 *
 * @export
 * @class PipeSymbol
 * @extends {Symbol}
 */
export declare class PipeSymbol extends Symbol {
    private resolver;
    private metadataResolver;
    private projectSymbols;
    /**
     * Creates an instance of PipeSymbol.
     *
     * @param {Program} program
     * @param {StaticSymbol} symbol
     * @param {PipeResolver} resolver
     * @param {ContextSymbols} projectSymbols
     *
     * @memberOf PipeSymbol
     */
    constructor(program: Program, symbol: StaticSymbol, resolver: PipeResolver, metadataResolver: CompileMetadataResolver, projectSymbols: ProjectSymbols);
    /**
     * Returns the module where the wrapped pipe was defined.
     *
     * @returns {(CompileNgModuleMetadata | undefined)}
     *
     * @memberOf PipeSymbol
     */
    getModule(): CompileNgModuleMetadata | undefined;
    /**
     * Returns the pipe metadata.
     *
     * @returns {Pipe}
     *
     * @memberOf PipeSymbol
     */
    getMetadata(): Pipe | null;
    getDependencies(): ProviderSymbol[];
}
