var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Symbol } from './symbol';
import { DirectiveSymbol } from './directive-symbol';
import { PipeSymbol } from './pipe-symbol';
import { ProviderSymbol } from './provider-symbol';
var ModuleSymbol = /** @class */ (function (_super) {
    __extends(ModuleSymbol, _super);
    function ModuleSymbol(program, symbol, metadataResolver, directiveNormalizer, resolver, pipeResolver, reflector, resourceResolver, projectSymbols) {
        var _this = _super.call(this, program, symbol) || this;
        _this.metadataResolver = metadataResolver;
        _this.directiveNormalizer = directiveNormalizer;
        _this.resolver = resolver;
        _this.pipeResolver = pipeResolver;
        _this.reflector = reflector;
        _this.resourceResolver = resourceResolver;
        _this.projectSymbols = projectSymbols;
        var meta = _this.metadataResolver.getNgModuleMetadata(symbol);
        if (meta) {
            _this.module = meta;
        }
        else {
            throw new Error('No metadata for ' + symbol.name);
        }
        return _this;
    }
    ModuleSymbol.prototype.getBootstrapComponents = function () {
        return this.getWrapperDirectives(this.module.bootstrapComponents);
    };
    ModuleSymbol.prototype.getDeclaredDirectives = function () {
        return this.getWrapperDirectives(this.module.declaredDirectives);
    };
    ModuleSymbol.prototype.getExportedDirectives = function () {
        return this.getWrapperDirectives(this.module.exportedDirectives);
    };
    ModuleSymbol.prototype.getExportedPipes = function () {
        return this.getWrappedPipes(this.module.exportedPipes);
    };
    ModuleSymbol.prototype.getDeclaredPipes = function () {
        return this.getWrappedPipes(this.module.declaredPipes);
    };
    ModuleSymbol.prototype.getImportedModules = function () {
        return this.getWrappedModules(this.module.importedModules);
    };
    ModuleSymbol.prototype.getExportedModules = function () {
        return this.getWrappedModules(this.module.exportedModules);
    };
    /**
     * Returns the summary of this context.
     *
     * @returns {(CompileNgModuleSummary | undefined)}
     *
     * @memberOf ModuleSymbol
     */
    ModuleSymbol.prototype.getModuleSummary = function () {
        return this.metadataResolver.getNgModuleSummary(this.symbol);
    };
    ModuleSymbol.prototype.getProviders = function () {
        var _this = this;
        return this.module.providers.map(function (p) {
            return new ProviderSymbol(_this._program, p, _this.metadataResolver);
        });
    };
    ModuleSymbol.prototype.getWrappedModules = function (modules) {
        var _this = this;
        return modules.map(function (s) {
            return new ModuleSymbol(_this._program, s.type.reference, _this.metadataResolver, _this.directiveNormalizer, _this.resolver, _this.pipeResolver, _this.reflector, _this.resourceResolver, _this.projectSymbols);
        });
    };
    ModuleSymbol.prototype.getWrappedPipes = function (pipes) {
        var _this = this;
        return pipes.map(function (i) {
            return new PipeSymbol(_this._program, i.reference, _this.pipeResolver, _this.metadataResolver, _this.projectSymbols);
        });
    };
    ModuleSymbol.prototype.getWrapperDirectives = function (dirs) {
        var _this = this;
        return dirs.map(function (i) {
            return new DirectiveSymbol(_this._program, i.reference, _this.metadataResolver, _this.directiveNormalizer, _this.resolver, _this.reflector, _this.resourceResolver, _this.projectSymbols);
        });
    };
    return ModuleSymbol;
}(Symbol));
export { ModuleSymbol };
//# sourceMappingURL=module-symbol.js.map