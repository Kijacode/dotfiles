import * as ts from 'typescript';
import { StaticSymbol } from '@angular/compiler';
/**
 * Base class which provides primitive for the DirectiveSymbol and
 * PipeSymbol. It contains some functionality common between these classes.
 *
 * @export
 * @class Symbol
 */
export declare class Symbol {
    protected _program: ts.Program;
    protected _symbol: StaticSymbol;
    /**
     * Creates an instance of Symbol.
     *
     * @param {ts.Program} _program
     * @param {StaticSymbol} _symbol
     *
     * @memberOf Symbol
     */
    constructor(_program: ts.Program, _symbol: StaticSymbol);
    /**
     * Gets the ts.node which corresponds to the controller of the DirectiveSymbol
     * or the implementation of the pipe.
     *
     * @returns {(ts.ClassDeclaration | undefined)}
     *
     * @memberOf Symbol
     */
    getNode(): ts.ClassDeclaration | undefined;
    /**
     * The wrapped `StaticSymbol` from `@angular/compiler`.
     *
     * @readonly
     *
     * @memberOf Symbol
     */
    readonly symbol: StaticSymbol;
}
