import { Program } from 'typescript';
import { CompileMetadataResolver, DirectiveNormalizer, DirectiveResolver, StaticReflector, StaticSymbol, PipeResolver } from '@angular/compiler';
import { ResourceResolver } from './resource-resolver';
import { ProjectSymbols } from './project-symbols';
import { Symbol } from './symbol';
import { DirectiveSymbol } from './directive-symbol';
import { PipeSymbol } from './pipe-symbol';
import { CompileNgModuleSummary } from '@angular/compiler';
import { ProviderSymbol } from './provider-symbol';
export declare class ModuleSymbol extends Symbol {
    private metadataResolver;
    private directiveNormalizer;
    private resolver;
    private pipeResolver;
    private reflector;
    private resourceResolver;
    private projectSymbols;
    private module;
    constructor(program: Program, symbol: StaticSymbol, metadataResolver: CompileMetadataResolver, directiveNormalizer: DirectiveNormalizer, resolver: DirectiveResolver, pipeResolver: PipeResolver, reflector: StaticReflector, resourceResolver: ResourceResolver, projectSymbols: ProjectSymbols);
    getBootstrapComponents(): DirectiveSymbol[];
    getDeclaredDirectives(): DirectiveSymbol[];
    getExportedDirectives(): DirectiveSymbol[];
    getExportedPipes(): PipeSymbol[];
    getDeclaredPipes(): PipeSymbol[];
    getImportedModules(): ModuleSymbol[];
    getExportedModules(): ModuleSymbol[];
    /**
     * Returns the summary of this context.
     *
     * @returns {(CompileNgModuleSummary | undefined)}
     *
     * @memberOf ModuleSymbol
     */
    getModuleSummary(): CompileNgModuleSummary | null;
    getProviders(): ProviderSymbol[];
    private getWrappedModules(modules);
    private getWrappedPipes(pipes);
    private getWrapperDirectives(dirs);
}
