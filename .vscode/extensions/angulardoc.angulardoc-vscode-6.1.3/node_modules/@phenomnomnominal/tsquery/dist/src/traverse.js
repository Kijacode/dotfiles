"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Dependencies:
var typescript_1 = require("typescript");
var syntax_kind_1 = require("./syntax-kind");
// Constants:
var FILTERED_KEYS = ['parent'];
var LITERAL_KINDS = [
    typescript_1.SyntaxKind.FalseKeyword,
    typescript_1.SyntaxKind.NoSubstitutionTemplateLiteral,
    typescript_1.SyntaxKind.NullKeyword,
    typescript_1.SyntaxKind.NumericLiteral,
    typescript_1.SyntaxKind.RegularExpressionLiteral,
    typescript_1.SyntaxKind.StringLiteral,
    typescript_1.SyntaxKind.TrueKeyword
];
var PARSERS = (_a = {},
    _a[typescript_1.SyntaxKind.FalseKeyword] = function () { return false; },
    _a[typescript_1.SyntaxKind.NoSubstitutionTemplateLiteral] = function (node) { return node.text; },
    _a[typescript_1.SyntaxKind.NullKeyword] = function () { return null; },
    _a[typescript_1.SyntaxKind.NumericLiteral] = function (node) { return +node.text; },
    _a[typescript_1.SyntaxKind.RegularExpressionLiteral] = function (node) { return new RegExp(node.text); },
    _a[typescript_1.SyntaxKind.StringLiteral] = function (node) { return node.text; },
    _a[typescript_1.SyntaxKind.TrueKeyword] = function () { return true; },
    _a);
function traverse(node, options) {
    addProperties(node);
    options.enter(node, node.parent || null);
    node.forEachChild(function (child) { return traverse(child, options); });
    options.leave(node, node.parent || null);
}
exports.traverse = traverse;
function traverseChildren(node, iterator) {
    var ancestors = [];
    traverse(node, {
        enter: function (childNode, parentNode) {
            if (parentNode != null) {
                ancestors.unshift(parentNode);
            }
            iterator(childNode, ancestors);
        },
        leave: function () {
            ancestors.shift();
        }
    });
}
exports.traverseChildren = traverseChildren;
function getVisitorKeys(node) {
    return !!node ? Object.keys(node)
        .filter(function (key) { return !FILTERED_KEYS.includes(key); })
        .filter(function (key) {
        var value = node[key];
        return Array.isArray(value) || typeof value === 'object';
    }) : [];
}
exports.getVisitorKeys = getVisitorKeys;
function addProperties(node) {
    if (isNotSet(node, 'kindName')) {
        node.kindName = syntax_kind_1.syntaxKindName(node.kind);
    }
    if (isNotSet(node, 'text')) {
        node.text = node.getText();
    }
    if (node.kind === typescript_1.SyntaxKind.Identifier && isNotSet(node, 'name')) {
        node.name = node.text;
    }
    if (isNotSet(node, 'value') && LITERAL_KINDS.includes(node.kind)) {
        node.value = PARSERS[node.kind](node);
    }
}
exports.addProperties = addProperties;
function isNotSet(object, property) {
    return object[property] == null;
}
var _a;
//# sourceMappingURL=traverse.js.map