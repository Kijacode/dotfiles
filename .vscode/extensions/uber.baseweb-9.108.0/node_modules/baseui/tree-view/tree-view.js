"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TreeView;

var React = _interopRequireWildcard(require("react"));

var _treeNode = _interopRequireDefault(require("./tree-node.js"));

var _styledComponents = require("./styled-components.js");

var _overrides = require("../helpers/overrides.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function TreeView(props) {
  var data = props.data,
      onToggle = props.onToggle,
      _props$overrides = props.overrides,
      overrides = _props$overrides === void 0 ? {} : _props$overrides,
      renderAll = props.renderAll;
  var RootOverride = overrides.Root;

  var Root = (0, _overrides.getOverride)(RootOverride) || _styledComponents.StyledTreeItemList;

  return React.createElement(Root, _extends({
    role: "tree"
  }, (0, _overrides.getOverrideProps)(RootOverride)), data.length && data.map(function (node, index) {
    return React.createElement(_treeNode.default, {
      key: index,
      node: node,
      onToggle: onToggle,
      overrides: overrides,
      renderAll: renderAll
    });
  }));
}