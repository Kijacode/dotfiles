"use strict";

var _shared = require("./shared.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function findTypedStyledCalls(j, root) {
  var styledImportName = (0, _shared.getStyledImportName)(j, root);
  return root.find(j.CallExpression, {
    callee: {
      name: styledImportName
    },
    typeArguments: {
      type: 'TypeParameterInstantiation'
    }
  });
}

function findStyledElementsWithTheme(j, root) {
  return findTypedStyledCalls(j, root).filter(function (path) {
    return path.value.typeArguments.params.length === 2 && path.value.arguments.length && path.value.arguments[0].type === 'Literal';
  });
}

function findStyledComponentsWithTheme(j, root) {
  return findTypedStyledCalls(j, root).filter(function (path) {
    return path.value.typeArguments.params.length === 3 && path.value.typeArguments.params[0].type === 'TypeofTypeAnnotation' && path.value.arguments.length && path.value.arguments[0].type === 'Identifier';
  });
}

var ThemeCache =
/*#__PURE__*/
function () {
  function ThemeCache() {
    _classCallCheck(this, ThemeCache);

    _defineProperty(this, "count", 0);

    _defineProperty(this, "visitedGenericTypes", {});
  }

  _createClass(ThemeCache, [{
    key: "insert",
    value: function insert(node) {
      if (node.type === 'GenericTypeAnnotation') {
        this.count++;
        this.visitedGenericTypes[node.id.name] = {
          node: node,
          position: this.count
        };
      } else {
        this.count++;
      }
    }
  }, {
    key: "read",
    value: function read(node) {
      if (node.type === 'GenericTypeAnnotation') {
        var value = this.visitedGenericTypes[node.id.name];
        return value ? value.node : null;
      } else {
        return null;
      }
    }
  }, {
    key: "position",
    value: function position(node) {
      if (node.type === 'GenericTypeAnnotation' && this.visitedGenericTypes[node.id.name]) {
        return this.visitedGenericTypes[node.id.name].position;
      } else {
        return this.count;
      }
    }
  }]);

  return ThemeCache;
}();

function buildThemedStyledXName(position) {
  if (position <= 1) {
    return 'themedStyled';
  }

  return "themedStyled".concat(position);
}

function visitStyledCall(j, path, themes) {
  var theme = path.node.typeArguments.params.pop();

  if (themes.read(theme)) {
    path.node.callee.name = buildThemedStyledXName(themes.position(theme));
  } else {
    themes.insert(theme);
    var nextCalleeName = buildThemedStyledXName(themes.position(theme));
    path.node.callee.name = nextCalleeName;
    var createThemedStyled = j.variableDeclaration('const', [j.variableDeclarator(j.identifier(nextCalleeName), j.callExpression(j.identifier('createThemedStyled'), []))]);
    createThemedStyled.declarations[0].init.callee.typeAnnotation = j.typeParameterInstantiation([themes.read(theme) || theme]);
    j(path).closest(j.VariableDeclaration).insertBefore(createThemedStyled);
  }
}

module.exports = function (file, api, options) {
  var j = api.jscodeshift;
  var root = j(file.source);

  if ((0, _shared.containsFlowComment)(j, root)) {
    var themes = new ThemeCache();
    var styledElements = findStyledElementsWithTheme(j, root);
    styledElements.forEach(function (path) {
      return visitStyledCall(j, path, themes);
    });
    var styledComponents = findStyledComponentsWithTheme(j, root);
    styledComponents.forEach(function (path) {
      return visitStyledCall(j, path, themes);
    });

    if (styledElements.length || styledComponents.length) {
      var baseImport = root.find(j.ImportDeclaration, {
        source: {
          value: 'baseui'
        }
      });
      var createThemedStyledSpecifier = j.importSpecifier(j.identifier('createThemedStyled'));
      baseImport.get(0).node.specifiers.push(createThemedStyledSpecifier);
    }
  }

  return root.toSource();
};

module.exports.parser = 'flow';