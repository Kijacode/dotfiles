"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matchesQuery = matchesQuery;
exports.splitByQuery = splitByQuery;
exports.HighlightCellText = HighlightCellText;

var _react = _interopRequireDefault(require("react"));

var _index = require("../styles/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function matchesQuery(text, query) {
  return text.toLowerCase().includes(query.toLowerCase());
}

function splitByQuery(text, query) {
  return text.split(new RegExp("(".concat(query, ")"), 'i'));
}

function HighlightCellText(props) {
  var _useStyletron = (0, _index.useStyletron)(),
      _useStyletron2 = _slicedToArray(_useStyletron, 2),
      css = _useStyletron2[0],
      theme = _useStyletron2[1];

  if (!props.query) {
    return props.text;
  }

  return _react.default.createElement(_react.default.Fragment, null, splitByQuery(props.text, props.query).map(function (el, i) {
    if (matchesQuery(el, props.query)) {
      return _react.default.createElement("span", {
        className: css(_objectSpread2({}, theme.typography.font150)),
        key: i
      }, el);
    }

    return el;
  }));
}