function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
Copyright (c) 2018-2020 Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import { styled } from '../styles/index.js';
import { SIZE, SIZE_DIMENSION, ANCHOR } from './constants.js';

function getSizeStyles($size, $anchor) {
  var styles = {
    maxWidth: '100%',
    maxHeight: '100%',
    width: SIZE_DIMENSION.default,
    height: SIZE_DIMENSION.full
  };

  if ($anchor === ANCHOR.left || $anchor === ANCHOR.right) {
    // If the anchor is horizontal, set the width
    styles.height = SIZE_DIMENSION.full;

    if (SIZE[$size]) {
      styles.width = SIZE_DIMENSION[$size];
    } else if (typeof $size === 'string') {
      styles.width = $size;
    }
  } else {
    // If the anchor is vertical, set the height
    styles.width = SIZE_DIMENSION.full;

    if (SIZE[$size]) {
      styles.height = SIZE_DIMENSION[$size];
    } else if (typeof $size === 'string') {
      styles.height = $size;
    }
  }

  return styles;
}

function getAnchorStyles(props) {
  var $anchor = props.$anchor,
      $isVisible = props.$isVisible,
      $size = props.$size;
  var sizeStyles = getSizeStyles($size, $anchor);
  var left = ANCHOR.left,
      right = ANCHOR.right,
      top = ANCHOR.top,
      bottom = ANCHOR.bottom;

  switch ($anchor) {
    case right:
      {
        return _objectSpread2({
          transform: $isVisible ? 'translateX(0)' : "translateX(".concat(sizeStyles.width, ")"),
          right: $isVisible ? 0 : "-".concat(sizeStyles.width),
          top: 0
        }, sizeStyles);
      }

    case left:
      {
        return _objectSpread2({
          transform: $isVisible ? 'translateX(0)' : "translateX(-".concat(sizeStyles.width, ")"),
          left: $isVisible ? 0 : "-".concat(sizeStyles.width),
          top: 0
        }, sizeStyles);
      }

    case bottom:
      {
        return _objectSpread2({
          transform: $isVisible ? 'translateY(0)' : "translateY(".concat(sizeStyles.height, ")"),
          left: 0,
          bottom: $isVisible ? '0' : "-".concat(sizeStyles.height)
        }, sizeStyles);
      }

    case top:
      {
        return _objectSpread2({
          transform: $isVisible ? 'translateY(0)' : "translateY(-".concat(sizeStyles.height, ")"),
          left: 0,
          top: $isVisible ? '0' : "-".concat(sizeStyles.height)
        }, sizeStyles);
      }

    default:
      {
        return {};
      }
  }
}

export var StyledRoot = styled('div', function (props) {
  return {
    position: 'fixed',
    overflow: 'auto',
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  };
});
StyledRoot.displayName = "StyledRoot";
export var StyledBackdrop = styled('div', function (props) {
  var $animating = props.$animating,
      $isOpen = props.$isOpen,
      $isVisible = props.$isVisible,
      $theme = props.$theme;
  return _objectSpread2({
    position: 'fixed',
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    // Remove grey highlight
    WebkitTapHighlightColor: 'transparent',
    // Disable scroll capabilities.
    touchAction: 'none',
    opacity: $isVisible && $isOpen ? 1 : 0
  }, $animating ? {
    transitionProperty: 'opacity',
    transitionDuration: $theme.animation.timing400,
    transitionTimingFunction: $theme.animation.easeOutCurve
  } : null);
});
StyledBackdrop.displayName = "StyledBackdrop";
export var StyledDrawerContainer = styled('div', function (props) {
  var $animating = props.$animating,
      $isOpen = props.$isOpen,
      $isVisible = props.$isVisible,
      $theme = props.$theme;
  return _objectSpread2({
    backgroundColor: $theme.colors.backgroundPrimary,
    borderTopLeftRadius: $theme.borders.surfaceBorderRadius,
    borderTopRightRadius: $theme.borders.surfaceBorderRadius,
    borderBottomRightRadius: $theme.borders.surfaceBorderRadius,
    borderBottomLeftRadius: $theme.borders.surfaceBorderRadius
  }, getAnchorStyles(props), {
    // Animation
    opacity: $isVisible && $isOpen ? 1 : 0
  }, $animating ? {
    transitionProperty: 'opacity, transform',
    transitionDuration: $theme.animation.timing400,
    transitionTimingFunction: $theme.animation.easeOutCurve
  } : null, {
    display: 'flex',
    position: 'fixed'
  });
});
StyledDrawerContainer.displayName = "StyledDrawerContainer";
export var StyledDrawerBody = styled('div', function (props) {
  var $theme = props.$theme;
  return _objectSpread2({}, $theme.typography.font200, {
    color: $theme.colors.contentPrimary,
    marginTop: $theme.sizing.scale900,
    marginBottom: $theme.sizing.scale900,
    marginLeft: $theme.sizing.scale900,
    marginRight: $theme.sizing.scale900,
    overflow: 'auto',
    width: '100%'
  });
});
StyledDrawerBody.displayName = "StyledDrawerBody";
export var StyledClose = styled('button', function (props) {
  var _ref;

  var $theme = props.$theme;
  return _ref = {
    // Reset button styles
    background: 'transparent',
    outline: 0,
    paddingLeft: 0,
    paddingTop: 0,
    paddingRight: 0,
    paddingBottom: 0,
    // colors
    fill: $theme.colors.primary,
    transitionProperty: 'fill, border-color',
    transitionDuration: $theme.animation.timing100,
    borderWidth: '1px',
    borderStyle: 'solid',
    borderColor: 'transparent',
    ':hover': {
      fill: $theme.colors.primary600
    },
    ':focus': {
      fill: $theme.colors.primary600,
      borderColor: $theme.colors.primary
    },
    // Positioning
    position: 'absolute',
    top: $theme.sizing.scale500
  }, _defineProperty(_ref, $theme.direction === 'rtl' ? 'left' : 'right', $theme.sizing.scale500), _defineProperty(_ref, "width", $theme.sizing.scale800), _defineProperty(_ref, "height", $theme.sizing.scale800), _defineProperty(_ref, "display", 'flex'), _defineProperty(_ref, "justifyContent", 'center'), _defineProperty(_ref, "alignItems", 'center'), _defineProperty(_ref, "cursor", 'pointer'), _ref;
});
StyledClose.displayName = "StyledClose";
export var Hidden = styled('div', {
  display: 'none'
});
Hidden.displayName = "Hidden";