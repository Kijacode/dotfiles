function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
Copyright (c) 2018-2020 Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
export var shouldShowValue = function shouldShowValue(state, props) {
  var inputValue = state.inputValue,
      isPseudoFocused = state.isPseudoFocused,
      isFocused = state.isFocused;
  var onSelectResetsInput = props.onSelectResetsInput;
  if (!inputValue) return true;

  if (!onSelectResetsInput) {
    return !(!isFocused && isPseudoFocused || isFocused && !isPseudoFocused);
  }

  return false;
};
export var shouldShowPlaceholder = function shouldShowPlaceholder(state, props, isOpen) {
  var inputValue = state.inputValue,
      isPseudoFocused = state.isPseudoFocused,
      isFocused = state.isFocused;
  var onSelectResetsInput = props.onSelectResetsInput;
  return !inputValue || !onSelectResetsInput && !isOpen && !isPseudoFocused && !isFocused;
};

function groupedOptionsToArray(groupedOptions) {
  return Object.keys(groupedOptions).reduce(function (arr, optgroup) {
    var optgroupOptions = groupedOptions[optgroup];
    return arr.concat(optgroupOptions.map(function (option) {
      return _objectSpread2({}, option, {
        __optgroup: optgroup
      });
    }));
  }, []);
}

export function normalizeOptions(options) {
  if (options) {
    if (Array.isArray(options)) {
      return options;
    } else {
      return groupedOptionsToArray(options);
    }
  }

  return [];
}
export var expandValue = function expandValue(value, props) {
  if (!props.options) return value;
  var normalizedOptions = normalizeOptions(props.options);

  for (var i = 0; i < normalizedOptions.length; i++) {
    if (String(normalizedOptions[i][props.valueKey]) === String(value[props.valueKey])) {
      return normalizedOptions[i];
    }
  }

  return value;
};