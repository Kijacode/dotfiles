#!/usr/bin/env node

/*
Copyright (c) 2018-2020 Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/

/* eslint-disable flowtype/require-valid-file-annotation */

/* eslint-env node*/
import _regeneratorRuntime from "@babel/runtime/regenerator";

function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fs = require('fs');

var path = require('path');

var prettier = require('prettier');

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function pascalCase(str) {
  return str.split('-').map(capitalize).join('');
}

function titleCase(str) {
  return str.split('-').map(capitalize).join(' ');
} // transform svg string to properly styled jsx


function reactify(svgString) {
  return svgString.replace(/<!--.*-->\n/gm, '').replace(/<\/?svg[^>]*>/gm, '').replace(/^\s*\n/gm, '').replace(/\n$/, '').replace(/\t/g, '  ').replace(/fill-rule/g, 'fillRule').replace(/clip-rule/g, 'clipRule').replace(/fill-opacity/g, 'fillOpacity').trim();
}

function cleanOldIcons() {
  var allJsFiles = fs.readdirSync(path.resolve(__dirname)).filter(function (f) {
    return f.endsWith('.js');
  });
  allJsFiles.forEach(function (f) {
    if (fs.readFileSync(path.resolve(__dirname, f), 'utf8').match(/^\/\/ BASEUI-GENERATED-REACT-ICON/m)) {
      fs.unlinkSync(path.resolve(__dirname, f));
    }
  });
}

function generateNewIcons() {
  var iconTemplate, svgs, prettierOptions, iconExports;
  return _regeneratorRuntime.async(function generateNewIcons$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          iconTemplate = fs.readFileSync(path.resolve(__dirname, './icon-template.txt'), 'utf8');
          svgs = fs.readdirSync(path.resolve(__dirname, './svg')).filter(function (f) {
            return f.endsWith('.svg');
          });
          _context2.next = 4;
          return _regeneratorRuntime.awrap(prettier.resolveConfig(__dirname));

        case 4:
          _context2.t0 = _context2.sent;

          if (_context2.t0) {
            _context2.next = 7;
            break;
          }

          _context2.t0 = {};

        case 7:
          prettierOptions = _context2.t0;
          iconExports = [];
          svgs.forEach(function _callee(svgFilename) {
            var svgFile, componentName, svgFileContents, iconProps, viewBox, result;
            return _regeneratorRuntime.async(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    svgFile = svgFilename.split('.')[0];
                    componentName = pascalCase(svgFile);
                    iconExports.push("export {default as ".concat(componentName, "} from './").concat(svgFile, ".js';"));
                    svgFileContents = fs.readFileSync(path.resolve(__dirname, "./svg/".concat(svgFilename)), 'utf8');
                    iconProps = ["title=\"".concat(titleCase(svgFile), "\"")];
                    viewBox = svgFileContents.match(/viewBox="[^"]+"/);

                    if (viewBox) {
                      iconProps.push(viewBox[0]);
                    }

                    result = iconTemplate.replace(new RegExp('%%ICON_NAME%%', 'g'), componentName).replace(new RegExp('%%ICON_PROPS%%', 'g'), iconProps.join(' ')).replace('%%ICON_PATH%%', reactify(svgFileContents));
                    fs.writeFileSync(path.resolve(__dirname, "./".concat(svgFile, ".js")), prettier.format(result, _objectSpread2({
                      parser: 'babylon'
                    }, prettierOptions)));

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            });
          });
          fs.writeFileSync(path.resolve(__dirname, "./icon-exports.js"), "/*\nCopyright (c) 2018-2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n// @flow\n".concat(iconExports.join('\n'), "\n")); // eslint-disable-next-line no-console

          console.log("Wrote ".concat(svgs.length, " icon(s)"));

        case 12:
        case "end":
          return _context2.stop();
      }
    }
  });
}

cleanOldIcons();
generateNewIcons();