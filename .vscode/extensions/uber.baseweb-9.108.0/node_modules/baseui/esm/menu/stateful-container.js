function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
Copyright (c) 2018-2020 Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react'; // Files

import { STATE_CHANGE_TYPES, KEY_STRINGS } from './constants.js';
import { scrollItemIntoView } from './utils.js'; // Types

var MenuStatefulContainer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MenuStatefulContainer, _React$Component);

  function MenuStatefulContainer() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, MenuStatefulContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MenuStatefulContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", _objectSpread2({}, _this.constructor.defaultProps.initialState, {}, _this.props.initialState));

    _defineProperty(_assertThisInitialized(_this), "rootRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "refList", []);

    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (event) {
      switch (event.key) {
        case KEY_STRINGS.ArrowUp:
        case KEY_STRINGS.ArrowDown:
        case KEY_STRINGS.ArrowLeft:
        case KEY_STRINGS.ArrowRight:
        case KEY_STRINGS.Home:
        case KEY_STRINGS.End:
          _this.handleArrowKey(event);

          break;

        case KEY_STRINGS.Enter:
          if (event.keyCode === 229) {
            // ref.
            // https://github.com/JedWatson/react-select/blob/e12b42b0e7598ec4a96a1a6480e0b2b4c7dc03e3/packages/react-select/src/Select.js#L1209
            break;
          }

          _this.handleEnterKey(event);

          break;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleArrowKey", function (event) {
      var rootRef = _this.props.rootRef ? _this.props.rootRef : _this.rootRef;
      var prevIndex = _this.state.highlightedIndex;
      var nextIndex = prevIndex;

      if (event.key === KEY_STRINGS.ArrowUp) {
        event.preventDefault();
        nextIndex = Math.max(0, prevIndex - 1);

        _this.internalSetState(STATE_CHANGE_TYPES.moveUp, {
          highlightedIndex: nextIndex
        });
      } else if (event.key === KEY_STRINGS.ArrowDown) {
        event.preventDefault();
        nextIndex = Math.min(prevIndex + 1, _this.getItems().length - 1);

        _this.internalSetState(STATE_CHANGE_TYPES.moveDown, {
          highlightedIndex: nextIndex
        });
      } else if (event.key === KEY_STRINGS.Home) {
        event.preventDefault();
        nextIndex = 0;

        _this.internalSetState(STATE_CHANGE_TYPES.moveUp, {
          highlightedIndex: nextIndex
        });
      } else if (event.key === KEY_STRINGS.End) {
        event.preventDefault();
        nextIndex = _this.getItems().length - 1;

        _this.internalSetState(STATE_CHANGE_TYPES.moveDown, {
          highlightedIndex: nextIndex
        });
      } else if (event.key === KEY_STRINGS.ArrowLeft) {
        if (_this.props.getParentMenu) {
          var parent = _this.props.getParentMenu(rootRef);

          if (parent && parent.current) {
            parent.current.focus();
          }
        }
      } else if (event.key === KEY_STRINGS.ArrowRight) {
        if (_this.props.getChildMenu) {
          var child = _this.props.getChildMenu(rootRef);

          if (child && child.current) {
            child.current.focus();
          }
        }
      }

      if (_this.refList[nextIndex]) {
        scrollItemIntoView(_this.refList[nextIndex].current, // $FlowFixMe
        rootRef.current, nextIndex === 0, nextIndex === _this.getItems().length - 1);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleEnterKey", function (event) {
      var onItemSelect = _this.props.onItemSelect;
      var highlightedIndex = _this.state.highlightedIndex;

      var items = _this.getItems();

      if (items[highlightedIndex] && onItemSelect && !items[highlightedIndex].disabled) {
        onItemSelect({
          item: items[highlightedIndex],
          event: event
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleItemClick", function (activedescendantId, index, item, event) {
      if (_this.props.onItemSelect && !item.disabled) {
        _this.props.onItemSelect({
          item: item,
          event: event
        });

        _this.internalSetState(STATE_CHANGE_TYPES.click, {
          highlightedIndex: index,
          activedescendantId: activedescendantId
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseEnter", function (activedescendantId, index) {
      _this.internalSetState(STATE_CHANGE_TYPES.mouseEnter, {
        highlightedIndex: index,
        activedescendantId: activedescendantId
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getRequiredItemProps", function (item, index) {
      var itemRef = _this.refList[index];

      if (!itemRef) {
        itemRef = React.createRef();
        _this.refList[index] = itemRef;
      }

      var requiredItemProps = _this.props.getRequiredItemProps(item, index);

      var activedescendantId = requiredItemProps.id || null;

      if (_this.state.highlightedIndex === index && _this.state.activedescendantId !== activedescendantId) {
        _this.setState({
          activedescendantId: activedescendantId
        });
      }

      return _objectSpread2({
        disabled: !!item.disabled,
        ref: itemRef,
        isFocused: _this.state.isFocused,
        isHighlighted: _this.state.highlightedIndex === index,
        // binds so that in-line functions can be avoided. this is to ensure
        // referential equality when option-list compares props in memoized compoent
        onClick: _this.handleItemClick.bind(_assertThisInitialized(_this), activedescendantId, index, item),
        onMouseEnter: _this.handleMouseEnter.bind(_assertThisInitialized(_this), activedescendantId, index),
        resetMenu: _this.resetMenu
      }, _this.state.highlightedIndex === index ? {
        id: activedescendantId
      } : {}, {}, requiredItemProps);
    });

    _defineProperty(_assertThisInitialized(_this), "focusMenu", function (event) {
      var rootRef = _this.props.rootRef ? _this.props.rootRef : _this.rootRef;

      if (_this.state.isFocused) {
        return;
      } // $FlowFixMe


      if (rootRef.current && rootRef.current.contains(event.target)) {
        if (_this.state.highlightedIndex < 0) {
          _this.internalSetState(STATE_CHANGE_TYPES.focus, {
            isFocused: true,
            highlightedIndex: 0
          });
        } else {
          _this.internalSetState(STATE_CHANGE_TYPES.focus, {
            isFocused: true
          });
        }

        rootRef.current.focus();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "unfocusMenu", function () {
      _this.internalSetState(STATE_CHANGE_TYPES.focus, {
        isFocused: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "resetMenu", function () {
      _this.internalSetState(STATE_CHANGE_TYPES.reset, {
        isFocused: false,
        highlightedIndex: -1,
        activedescendantId: null
      });
    });

    return _this;
  }

  _createClass(MenuStatefulContainer, [{
    key: "getItems",
    value: function getItems() {
      var _this2 = this;

      if (Array.isArray(this.props.items)) {
        return this.props.items;
      }

      var optgroups = Object.keys(this.props.items);
      return optgroups.reduce(function (output, optgroup) {
        // $FlowFixMe already checked above that items is grouped shape
        return output.concat(_this2.props.items[optgroup]);
      }, []);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var rootRef = this.props.rootRef ? this.props.rootRef : this.rootRef;

      if (typeof document !== 'undefined') {
        if (rootRef.current
        /** This condition added to satisfy Flow */
        && this.state.highlightedIndex > -1 && this.refList[this.state.highlightedIndex]) {
          scrollItemIntoView(this.refList[this.state.highlightedIndex].current, rootRef.current, this.state.highlightedIndex === 0, this.state.highlightedIndex === this.getItems().length - 1, 'center');
        }

        if (this.state.isFocused) {
          document.addEventListener('keydown', this.onKeyDown);
        }
      }

      this.props.addMenuToNesting && this.props.addMenuToNesting(rootRef);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var rootRef = this.props.rootRef ? this.props.rootRef : this.rootRef;

      if (typeof document !== 'undefined') {
        document.removeEventListener('keydown', this.onKeyDown);
      }

      this.props.removeMenuFromNesting && this.props.removeMenuFromNesting(rootRef);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_, prevState) {
      if (typeof document !== 'undefined') {
        if (!prevState.isFocused && this.state.isFocused) {
          document.addEventListener('keydown', this.onKeyDown);
        } else if (prevState.isFocused && !this.state.isFocused) {
          document.removeEventListener('keydown', this.onKeyDown);
        }
      }
    } // One array to hold all of list item refs

  }, {
    key: "internalSetState",
    // Internal set state function that will also invoke stateReducer
    value: function internalSetState(changeType, changes) {
      var stateReducer = this.props.stateReducer;
      this.setState(stateReducer(changeType, changes, this.state));
    }
  }, {
    key: "render",
    value: function render() {
      // omit the stateful-container's props and don't pass it down
      // to the children (stateless menu)
      var _this$props = this.props,
          initialState = _this$props.initialState,
          stateReducer = _this$props.stateReducer,
          children = _this$props.children,
          onItemSelect = _this$props.onItemSelect,
          addMenuToNesting = _this$props.addMenuToNesting,
          removeMenuFromNesting = _this$props.removeMenuFromNesting,
          getParentMenu = _this$props.getParentMenu,
          getChildMenu = _this$props.getChildMenu,
          restProps = _objectWithoutProperties(_this$props, ["initialState", "stateReducer", "children", "onItemSelect", "addMenuToNesting", "removeMenuFromNesting", "getParentMenu", "getChildMenu"]);

      return this.props.children(_objectSpread2({}, restProps, {
        rootRef: this.props.rootRef ? this.props.rootRef : this.rootRef,
        activedescendantId: this.state.activedescendantId,
        getRequiredItemProps: this.getRequiredItemProps,
        highlightedIndex: this.state.highlightedIndex,
        isFocused: this.state.isFocused,
        focusMenu: this.focusMenu,
        unfocusMenu: this.unfocusMenu
      }));
    }
  }]);

  return MenuStatefulContainer;
}(React.Component);

_defineProperty(MenuStatefulContainer, "defaultProps", {
  // keeping it in defaultProps to satisfy Flow
  initialState: {
    // We start the index at -1 to indicate that no highlighting exists initially
    highlightedIndex: -1,
    isFocused: false,
    activedescendantId: null
  },
  stateReducer: function (changeType, changes) {
    return changes;
  },
  onItemSelect: function onItemSelect() {},
  getRequiredItemProps: function getRequiredItemProps() {
    return {};
  },
  children: function children() {
    return null;
  },
  // from nested-menus context
  addMenuToNesting: function addMenuToNesting() {},
  removeMenuFromNesting: function removeMenuFromNesting() {},
  getParentMenu: function getParentMenu() {},
  getChildMenu: function getChildMenu() {}
});

export { MenuStatefulContainer as default };