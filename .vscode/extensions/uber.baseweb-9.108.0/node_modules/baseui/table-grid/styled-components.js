"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledBodyCell = exports.StyledHeadCell = exports.StyledTable = void 0;

var React = _interopRequireWildcard(require("react"));

var _index = require("../styles/index.js");

var _index2 = require("../table/index.js");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var StyledTableElement = (0, _index.withStyle)(_index2.StyledTable, function (props) {
  return {
    display: 'grid',
    gridTemplateColumns: props.$gridTemplateColumns,
    flexDirection: 'unset'
  };
}); // eslint-disable-next-line flowtype/no-weak-types

StyledTableElement.displayName = "StyledTableElement";
var StyledTable = React.forwardRef(function (props, ref) {
  return (//$FlowFixMe
    React.createElement(StyledTableElement, _extends({
      ref: ref,
      "data-baseweb": "table-grid",
      role: "grid"
    }, props))
  ); // eslint-disable-next-line flowtype/no-weak-types
});
exports.StyledTable = StyledTable;
StyledTable.__STYLETRON__ = StyledTableElement.__STYLETRON__;
StyledTable.displayName = 'StyledTable';
var StyledHeadCell = (0, _index.withStyle)(_index2.StyledHeadCell, function (_ref) {
  var _ref$$sticky = _ref.$sticky,
      $sticky = _ref$$sticky === void 0 ? true : _ref$$sticky,
      $theme = _ref.$theme;
  return {
    backgroundColor: $theme.colors.tableHeadBackgroundColor,
    boxShadow: $theme.lighting.shadow400,
    position: $sticky ? 'sticky' : null,
    top: $sticky ? 0 : null,
    width: 'unset'
  };
});
exports.StyledHeadCell = StyledHeadCell;
StyledHeadCell.displayName = "StyledHeadCell";
var StyledBodyCell = (0, _index.withStyle)(_index2.StyledCell, function (props) {
  return {
    display: 'block',
    flex: 'unset',
    gridColumn: props.$gridColumn || null,
    gridRow: props.$gridRow || null
  };
});
exports.StyledBodyCell = StyledBodyCell;
StyledBodyCell.displayName = "StyledBodyCell";