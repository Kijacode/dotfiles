function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) 2018-2020 Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import { styled, hexToRgb } from '../styles/index.js';
export const StyledRoot = styled('nav', props => {
  const {
    $theme: {
      colors,
      typography
    }
  } = props;
  return { ...typography.font300,
    color: colors.contentPrimary,
    listStyleType: 'none',
    marginTop: 0,
    marginBottom: 0,
    marginLeft: 0,
    marginRight: 0,
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  };
});
StyledRoot.displayName = "StyledRoot";
export const StyledNavItemContainer = styled('li', {});
StyledNavItemContainer.displayName = "StyledNavItemContainer";
export const StyledNavLink = styled('a', {
  color: 'inherit',
  textDecoration: 'none'
});
StyledNavLink.displayName = "StyledNavLink";
export const StyledNavItemElement = styled('div', props => {
  const {
    $active,
    $selectable,
    $level,
    $theme,
    $theme: {
      colors,
      sizing
    }
  } = props;
  const bgImgGradient = hexToRgb(colors.backgroundPrimary, '0.92') || '';
  return {
    backgroundColor: $active ? colors.backgroundInversePrimary : 'transparent',
    backgroundImage: $active ? `linear-gradient(0deg, ${bgImgGradient}, ${bgImgGradient})` : null,
    boxSizing: 'border-box',
    [$theme.direction === 'rtl' ? 'borderRightWidth' : 'borderLeftWidth']: '4px',
    [$theme.direction === 'rtl' ? 'borderRightStyle' : 'borderLeftStyle']: 'solid',
    [$theme.direction === 'rtl' ? 'borderRightColor' : 'borderLeftColor']: $active ? colors.primary : 'transparent',
    color: $active ? colors.primary : null,
    cursor: $selectable ? 'pointer' : 'default',
    // outline: 'none',
    paddingTop: sizing.scale500,
    paddingBottom: sizing.scale500,
    [$theme.direction === 'rtl' ? 'paddingRight' : 'paddingLeft']: `calc(${sizing.scale800} * ${$level})`,
    [$theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight']: sizing.scale500,
    ':hover': {
      color: $selectable ? colors.primary : null
    },
    ':focus': {
      color: $selectable ? colors.primary : null
    }
  };
});
StyledNavItemElement.displayName = "StyledNavItemElement";
export const StyledNavItem = React.forwardRef(({
  item,
  ...restProps
}, ref) => React.createElement(StyledNavItemElement, _extends({
  ref: ref
}, restProps)) // eslint-disable-next-line flowtype/no-weak-types
);
StyledNavItem.__STYLETRON__ = StyledNavItemElement.__STYLETRON__;
StyledNavItem.displayName = 'StyledNavItem';
export const StyledSubNavContainer = styled('ul', {
  listStyleType: 'none',
  marginTop: 0,
  marginBottom: 0,
  marginLeft: 0,
  marginRight: 0,
  paddingTop: 0,
  paddingBottom: 0,
  paddingLeft: 0,
  paddingRight: 0
});
StyledSubNavContainer.displayName = "StyledSubNavContainer";