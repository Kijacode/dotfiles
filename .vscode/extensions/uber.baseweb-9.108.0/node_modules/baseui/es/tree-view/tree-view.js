function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) 2018-2020 Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import TreeNode from './tree-node.js';
import { StyledTreeItemList } from './styled-components.js';
import { getOverride, getOverrideProps } from '../helpers/overrides.js';
export default function TreeView(props) {
  const {
    data,
    onToggle,
    overrides = {},
    renderAll
  } = props;
  const {
    Root: RootOverride
  } = overrides;
  const Root = getOverride(RootOverride) || StyledTreeItemList;
  return React.createElement(Root, _extends({
    role: "tree"
  }, getOverrideProps(RootOverride)), data.length && data.map((node, index) => React.createElement(TreeNode, {
    key: index,
    node: node,
    onToggle: onToggle,
    overrides: overrides,
    renderAll: renderAll
  })));
}