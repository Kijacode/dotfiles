"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MaskedInput;

var React = _interopRequireWildcard(require("react"));

var _reactInputMask = _interopRequireDefault(require("react-input-mask"));

var _input = _interopRequireDefault(require("./input.js"));

var _styledComponents = require("./styled-components.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var MaskOverride = React.forwardRef(function (_ref, ref) {
  var startEnhancer = _ref.startEnhancer,
      endEnhancer = _ref.endEnhancer,
      error = _ref.error,
      positive = _ref.positive,
      onChange = _ref.onChange,
      onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      value = _ref.value,
      disabled = _ref.disabled,
      restProps = _objectWithoutProperties(_ref, ["startEnhancer", "endEnhancer", "error", "positive", "onChange", "onFocus", "onBlur", "value", "disabled"]);

  return React.createElement(_reactInputMask.default, _extends({
    onChange: onChange,
    onFocus: onFocus,
    onBlur: onBlur,
    value: value,
    disabled: disabled
  }, restProps), function (props) {
    return React.createElement(_styledComponents.Input, _extends({
      ref: ref,
      onChange: onChange,
      onFocus: onFocus,
      onBlur: onBlur,
      value: value,
      disabled: disabled
    }, props));
  });
});

function MaskedInput(_ref2) {
  var mask = _ref2.mask,
      maskChar = _ref2.maskChar,
      _ref2$overrides = _ref2.overrides;
  _ref2$overrides = _ref2$overrides === void 0 ? {} : _ref2$overrides;

  var _ref2$overrides$Input = _ref2$overrides.Input,
      inputOverride = _ref2$overrides$Input === void 0 ? {} : _ref2$overrides$Input,
      restOverrides = _objectWithoutProperties(_ref2$overrides, ["Input"]),
      restProps = _objectWithoutProperties(_ref2, ["mask", "maskChar", "overrides"]);

  var componentOverride = MaskOverride;
  var propsOverride = {};
  var styleOverride = {};

  if (typeof inputOverride === 'function') {
    componentOverride = inputOverride;
  } else if (_typeof(inputOverride) === 'object') {
    componentOverride = inputOverride.component || componentOverride;
    propsOverride = inputOverride.props || {};
    styleOverride = inputOverride.style || {};
  }

  var nextOverrides = _objectSpread2({
    Input: {
      component: componentOverride,
      props: _objectSpread2({
        mask: mask,
        maskChar: maskChar
      }, propsOverride),
      style: styleOverride
    }
  }, restOverrides);

  return React.createElement(_input.default, _extends({}, restProps, {
    overrides: nextOverrides
  }));
}

MaskedInput.defaultProps = {
  maskChar: ' '
};